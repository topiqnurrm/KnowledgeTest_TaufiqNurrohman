import { z } from 'zod';
export declare const HooksSchema: z.ZodObject<{
    onBeforeRequest: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodObject<{
        request: z.ZodType<Request, z.ZodTypeDef, Request>;
    }, "strip", z.ZodTypeAny, {
        request: Request;
    }, {
        request: Request;
    }>], z.ZodUnknown>, z.ZodUnion<[z.ZodVoid, z.ZodPromise<z.ZodVoid>]>>>;
    onResponseReceived: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodObject<{
        response: z.ZodType<Response, z.ZodTypeDef, Response>;
        operation: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        response: Response;
        operation: Record<string, any>;
    }, {
        response: Response;
        operation: Record<string, any>;
    }>], z.ZodUnknown>, z.ZodUnion<[z.ZodVoid, z.ZodPromise<z.ZodVoid>]>>>;
}, "strip", z.ZodTypeAny, {
    onBeforeRequest?: ((args_0: {
        request: Request;
    }, ...args: unknown[]) => void | Promise<void>) | undefined;
    onResponseReceived?: ((args_0: {
        response: Response;
        operation: Record<string, any>;
    }, ...args: unknown[]) => void | Promise<void>) | undefined;
}, {
    onBeforeRequest?: ((args_0: {
        request: Request;
    }, ...args: unknown[]) => void | Promise<void>) | undefined;
    onResponseReceived?: ((args_0: {
        response: Response;
        operation: Record<string, any>;
    }, ...args: unknown[]) => void | Promise<void>) | undefined;
}>;
export declare const ApiClientPluginSchema: z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodObject<{
    name: z.ZodString;
    views: z.ZodOptional<z.ZodObject<{
        'request.section': z.ZodOptional<z.ZodArray<z.ZodObject<{
            title: z.ZodOptional<z.ZodString>;
            component: z.ZodUnknown;
            props: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
        }, "strip", z.ZodTypeAny, {
            title?: string | undefined;
            component?: unknown;
            props?: Record<string, any> | undefined;
        }, {
            title?: string | undefined;
            component?: unknown;
            props?: Record<string, any> | undefined;
        }>, "many">>;
        'response.section': z.ZodOptional<z.ZodArray<z.ZodObject<{
            title: z.ZodOptional<z.ZodString>;
            component: z.ZodUnknown;
            props: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
        }, "strip", z.ZodTypeAny, {
            title?: string | undefined;
            component?: unknown;
            props?: Record<string, any> | undefined;
        }, {
            title?: string | undefined;
            component?: unknown;
            props?: Record<string, any> | undefined;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        'request.section'?: {
            title?: string | undefined;
            component?: unknown;
            props?: Record<string, any> | undefined;
        }[] | undefined;
        'response.section'?: {
            title?: string | undefined;
            component?: unknown;
            props?: Record<string, any> | undefined;
        }[] | undefined;
    }, {
        'request.section'?: {
            title?: string | undefined;
            component?: unknown;
            props?: Record<string, any> | undefined;
        }[] | undefined;
        'response.section'?: {
            title?: string | undefined;
            component?: unknown;
            props?: Record<string, any> | undefined;
        }[] | undefined;
    }>>;
    hooks: z.ZodOptional<z.ZodObject<{
        onBeforeRequest: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodObject<{
            request: z.ZodType<Request, z.ZodTypeDef, Request>;
        }, "strip", z.ZodTypeAny, {
            request: Request;
        }, {
            request: Request;
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodVoid, z.ZodPromise<z.ZodVoid>]>>>;
        onResponseReceived: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodObject<{
            response: z.ZodType<Response, z.ZodTypeDef, Response>;
            operation: z.ZodRecord<z.ZodString, z.ZodAny>;
        }, "strip", z.ZodTypeAny, {
            response: Response;
            operation: Record<string, any>;
        }, {
            response: Response;
            operation: Record<string, any>;
        }>], z.ZodUnknown>, z.ZodUnion<[z.ZodVoid, z.ZodPromise<z.ZodVoid>]>>>;
    }, "strip", z.ZodTypeAny, {
        onBeforeRequest?: ((args_0: {
            request: Request;
        }, ...args: unknown[]) => void | Promise<void>) | undefined;
        onResponseReceived?: ((args_0: {
            response: Response;
            operation: Record<string, any>;
        }, ...args: unknown[]) => void | Promise<void>) | undefined;
    }, {
        onBeforeRequest?: ((args_0: {
            request: Request;
        }, ...args: unknown[]) => void | Promise<void>) | undefined;
        onResponseReceived?: ((args_0: {
            response: Response;
            operation: Record<string, any>;
        }, ...args: unknown[]) => void | Promise<void>) | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    views?: {
        'request.section'?: {
            title?: string | undefined;
            component?: unknown;
            props?: Record<string, any> | undefined;
        }[] | undefined;
        'response.section'?: {
            title?: string | undefined;
            component?: unknown;
            props?: Record<string, any> | undefined;
        }[] | undefined;
    } | undefined;
    hooks?: {
        onBeforeRequest?: ((args_0: {
            request: Request;
        }, ...args: unknown[]) => void | Promise<void>) | undefined;
        onResponseReceived?: ((args_0: {
            response: Response;
            operation: Record<string, any>;
        }, ...args: unknown[]) => void | Promise<void>) | undefined;
    } | undefined;
}, {
    name: string;
    views?: {
        'request.section'?: {
            title?: string | undefined;
            component?: unknown;
            props?: Record<string, any> | undefined;
        }[] | undefined;
        'response.section'?: {
            title?: string | undefined;
            component?: unknown;
            props?: Record<string, any> | undefined;
        }[] | undefined;
    } | undefined;
    hooks?: {
        onBeforeRequest?: ((args_0: {
            request: Request;
        }, ...args: unknown[]) => void | Promise<void>) | undefined;
        onResponseReceived?: ((args_0: {
            response: Response;
            operation: Record<string, any>;
        }, ...args: unknown[]) => void | Promise<void>) | undefined;
    } | undefined;
}>>;
export type ApiClientPlugin = z.infer<typeof ApiClientPluginSchema>;
//# sourceMappingURL=api-client-plugin.d.ts.map