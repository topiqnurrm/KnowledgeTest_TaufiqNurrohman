{
  "version": 3,
  "sources": ["../src/openapi-types.test-d.ts"],
  "sourcesContent": ["import { describe, expectTypeOf, it } from 'vitest'\n\nimport type { OpenAPI, OpenAPIV2, OpenAPIV3, OpenAPIV3_1 } from './openapi-types'\n\ndescribe('OpenAPI', () => {\n  it('has a generic type', () => {\n    const specification: OpenAPI.Document = {\n      // anything\n    }\n\n    expectTypeOf(specification).toMatchTypeOf<OpenAPI.Document>()\n  })\n\n  it('narrows it down to Swagger 2.0', () => {\n    const specification: OpenAPI.Document = {\n      swagger: '2.0',\n    }\n\n    expectTypeOf(specification).toMatchTypeOf<OpenAPIV2.Document>()\n  })\n\n  it('narrows it down to OpenAPI 3.0.0', () => {\n    const specification: OpenAPI.Document = {\n      openapi: '3.0.0',\n    }\n\n    expectTypeOf(specification).toMatchTypeOf<OpenAPIV3.Document>()\n  })\n\n  it('narrows it down to OpenAPI 3.0.4', () => {\n    const specification: OpenAPI.Document = {\n      openapi: '3.0.4',\n    }\n\n    expectTypeOf(specification).toMatchTypeOf<OpenAPIV3.Document>()\n  })\n\n  it('narrows it down to OpenAPI 3.1.0', () => {\n    const specification: OpenAPI.Document = {\n      openapi: '3.1.0',\n    }\n\n    expectTypeOf(specification).toMatchTypeOf<OpenAPIV3_1.Document>()\n  })\n\n  it('narrows it down to OpenAPI 3.1.1', () => {\n    const specification: OpenAPI.Document = {\n      openapi: '3.1.1',\n    }\n\n    expectTypeOf(specification).toMatchTypeOf<OpenAPIV3_1.Document>()\n  })\n\n  it('types a custom extension', () => {\n    const specification: OpenAPI.Document<{\n      'x-custom'?: boolean\n      'random-attribute'?: any\n    }> = {}\n\n    expectTypeOf(specification['random-attribute']).toEqualTypeOf<any>()\n    expectTypeOf(specification['x-custom']).toEqualTypeOf<boolean | undefined>()\n  })\n\n  it('has a HttpMethod type', () => {\n    const validMethod: OpenAPI.HttpMethod = 'GET'\n    const anotherValidMethod: Lowercase<OpenAPI.HttpMethod> = 'get'\n\n    expectTypeOf(validMethod).toMatchTypeOf<OpenAPI.HttpMethod>()\n    expectTypeOf(anotherValidMethod).toMatchTypeOf<Lowercase<OpenAPI.HttpMethod>>()\n\n    // @ts-expect-error name is a string\n    assertType('NOT_A_METHOD' as OpenAPI.HttpMethod)\n  })\n})\n"],
  "mappings": "AAAA,SAAS,UAAU,cAAc,UAAU;AAI3C,SAAS,WAAW,MAAM;AACxB,KAAG,sBAAsB,MAAM;AAC7B,UAAM,gBAAkC;AAAA;AAAA,IAExC;AAEA,iBAAa,aAAa,EAAE,cAAgC;AAAA,EAC9D,CAAC;AAED,KAAG,kCAAkC,MAAM;AACzC,UAAM,gBAAkC;AAAA,MACtC,SAAS;AAAA,IACX;AAEA,iBAAa,aAAa,EAAE,cAAkC;AAAA,EAChE,CAAC;AAED,KAAG,oCAAoC,MAAM;AAC3C,UAAM,gBAAkC;AAAA,MACtC,SAAS;AAAA,IACX;AAEA,iBAAa,aAAa,EAAE,cAAkC;AAAA,EAChE,CAAC;AAED,KAAG,oCAAoC,MAAM;AAC3C,UAAM,gBAAkC;AAAA,MACtC,SAAS;AAAA,IACX;AAEA,iBAAa,aAAa,EAAE,cAAkC;AAAA,EAChE,CAAC;AAED,KAAG,oCAAoC,MAAM;AAC3C,UAAM,gBAAkC;AAAA,MACtC,SAAS;AAAA,IACX;AAEA,iBAAa,aAAa,EAAE,cAAoC;AAAA,EAClE,CAAC;AAED,KAAG,oCAAoC,MAAM;AAC3C,UAAM,gBAAkC;AAAA,MACtC,SAAS;AAAA,IACX;AAEA,iBAAa,aAAa,EAAE,cAAoC;AAAA,EAClE,CAAC;AAED,KAAG,4BAA4B,MAAM;AACnC,UAAM,gBAGD,CAAC;AAEN,iBAAa,cAAc,kBAAkB,CAAC,EAAE,cAAmB;AACnE,iBAAa,cAAc,UAAU,CAAC,EAAE,cAAmC;AAAA,EAC7E,CAAC;AAED,KAAG,yBAAyB,MAAM;AAChC,UAAM,cAAkC;AACxC,UAAM,qBAAoD;AAE1D,iBAAa,WAAW,EAAE,cAAkC;AAC5D,iBAAa,kBAAkB,EAAE,cAA6C;AAG9E,eAAW,cAAoC;AAAA,EACjD,CAAC;AACH,CAAC;",
  "names": []
}
