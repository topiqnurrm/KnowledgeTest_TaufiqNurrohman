import * as neon from '@neondatabase/serverless';
import type { SqlDriverAdapter } from '@prisma/driver-adapter-utils';
import type { SqlDriverAdapterFactory } from '@prisma/driver-adapter-utils';

export declare class PrismaNeon implements SqlDriverAdapterFactory {
    private readonly config;
    private options?;
    readonly provider = "postgres";
    readonly adapterName: string;
    constructor(config: neon.PoolConfig, options?: PrismaNeonOptions | undefined);
    connect(): Promise<SqlDriverAdapter>;
}

export declare class PrismaNeonHTTP implements SqlDriverAdapterFactory {
    private readonly connectionString;
    private readonly options;
    readonly provider = "postgres";
    readonly adapterName: string;
    constructor(connectionString: string, options: neon.HTTPQueryOptions<boolean, boolean>);
    connect(): Promise<SqlDriverAdapter>;
}

declare type PrismaNeonOptions = {
    schema?: string;
};

export { }
